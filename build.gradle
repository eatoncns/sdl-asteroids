allprojects {
    apply plugin: "cpp"
    
    model {
        platforms {
            x86 {
                architecture "x86"
            }
        }
        repositories {
            libs(PrebuiltLibraries) {
                boost {
                    headers.srcDir "$System.env.BOOST_INCLUDE"
                }
            }
        }
    }
    
    binaries.all {
        cppCompiler.args '-g'
        lib library: "boost", linkage: "api"
        linker.args '-lSDL2', '-lSDL2_image'
    }

}

project(":asteroids") {

    apply plugin: "cpp"
    apply plugin: "google-test"

    model {
        repositories {
            libs(PrebuiltLibraries) {
                googleMock {
                    headers.srcDir "$System.env.GMOCK_INCLUDE"
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile =
                            file("${System.env.GMOCK_LIB}/libgmock.a")
                    }
                }
            }
        }
        components {
            game(NativeLibrarySpec) {
                targetPlatform "x86"
            }
        }
    }
    
    binaries.withType(GoogleTestTestSuiteBinarySpec) {
        lib library: "googleMock", linkage: "static"

        if (targetPlatform.operatingSystem.linux) {
            cppCompiler.args '-pthread'
            linker.args '-pthread'
        }
    }

    tasks.withType(RunTestExecutable) {
        args "--gtest_output=xml:test_detail.xml"
    }
}

project(":main") {
    apply plugin: "cpp"

    model {
        components {
            main(NativeExecutableSpec) {
                targetPlatform "x86"
                sources {
                    cpp {
                        lib project: ':asteroids', library: 'game', linkage: 'static'
                    }
                }
            }
        }
    }
}

task copyResources(type:Copy) {
    description 'Copies resources into release install directory'
    from 'resources'
    into 'main/build/binaries/mainExecutable/resources'
}

task run(type:Exec, dependsOn: copyResources) {
    description 'Runs game binary'
    workingDir 'main/build/binaries/mainExecutable'
    commandLine './main'
}
